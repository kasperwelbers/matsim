// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// tcrossprod_with_filters_cpp
Eigen::SparseMatrix<double> tcrossprod_with_filters_cpp(Eigen::SparseMatrix<double>& m1, Eigen::SparseMatrix<double>& m2, double min_value, bool only_upper, bool diag, int top_n, bool verbose);
RcppExport SEXP _matsim_tcrossprod_with_filters_cpp(SEXP m1SEXP, SEXP m2SEXP, SEXP min_valueSEXP, SEXP only_upperSEXP, SEXP diagSEXP, SEXP top_nSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double>& >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double>& >::type m2(m2SEXP);
    Rcpp::traits::input_parameter< double >::type min_value(min_valueSEXP);
    Rcpp::traits::input_parameter< bool >::type only_upper(only_upperSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< int >::type top_n(top_nSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(tcrossprod_with_filters_cpp(m1, m2, min_value, only_upper, diag, top_n, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_matsim_tcrossprod_with_filters_cpp", (DL_FUNC) &_matsim_tcrossprod_with_filters_cpp, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_matsim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
